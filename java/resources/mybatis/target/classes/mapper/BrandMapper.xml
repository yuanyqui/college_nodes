<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.BrandMapper">
    <resultMap id="Brandresult" type="entity.Brand">
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>
    </resultMap>
<!--    如果想要获得插入以后的id值则需要使用usergeneratedkeys='true'和keyProperty='id'-->
    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand(brand_name,company_name,ordered,description,status) values(#{brandName},#{companyName},#{ordered}
        ,#{description},#{status})
    </insert>
    <update id="update">
        update tb_brand
            <set>
            <if test="brandName!=null and brandName!=''">
            brand_name=#{brandName},
            </if>

            <if test="companyName!=null and companyName!=''">
                 company_name=#{companyName},
            </if>
            <if test="ordered!=null">
                ordered=#{ordered},
            </if>
            <if test="description!=null and descripetion!=''">
            description=#{description},
            </if>
                <if test="status!=null">
                    status=#{status},
                </if>
            </set>
            where
                id=#{id}
    </update>
    <delete id="deleteById">
        delete  from tb_brand
        where id=#{id}
    </delete>
<!--  collection 属性：-->
<!--  mybatis会将数组参数，封装为一个Map集合。-->
<!--  默认：array = 数组-->
<!--  使用@Param注解改变map集合的默认key的名称-->
<!--  item 属性：本次迭代获取到的元素。-->
<!--  separator 属性：集合项迭代之间的分隔符。`foreach` 标签不会错误地添加多余的分隔符。也就是最后一次迭代不会加分隔符。-->
<!--  open 属性：该属性值是在拼接SQL语句之前拼接的语句，只会拼接一次-->
<!--  close 属性：该属性值是在拼接SQL语句拼接后拼接的语句，只会拼接一次-->
    <delete id="deleteByIds">
        delete from tb_brand
        where id in
        <foreach collection="array" item="id" close=")" open="(" separator=",">
        #{id}
        </foreach>
    </delete>
    <select id="selectAll" resultMap="Brandresult">
        select * from tb_brand;
    </select>
    <select id="selectBrandById" resultMap="Brandresult">
        select * from tb_brand
        where id=#{id};
    </select>
    <select id="selectByCondition" resultMap="Brandresult">
        select * from tb_brand
        <where>
            <if test="status!=null">
                and status=#{status}
            </if>
            <if test="companyName!=null and companyName!=''">
                and company_name like #{companyName}
            </if>
            <if test="brandName!=null and brandName!=''">
                and brand_name like #{brandName}
            </if>
        </where>

    </select>
    <select id="selectByConditionSingle" resultMap="Brandresult">
        select * from tb_brand
        where
            <choose>
                <when test="status!=null">
                    status=#{status}
                </when>
                <when test="companyName!=null and companyName=''">
                    company_name like #{companyName}
            </when>
            <when test="brandName!=null and brandName!=''">
                    brand_name like #{brandName}
            </when>
            </choose>

    </select>

</mapper>